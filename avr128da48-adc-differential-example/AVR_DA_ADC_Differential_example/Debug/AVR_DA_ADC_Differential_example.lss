
AVR_DA_ADC_Differential_example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00804000  00804000  000001e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003642  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d97  00000000  00000000  000038b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000359  00000000  00000000  0000664d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000069a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001db5  00000000  00000000  000069cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00008781  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 76 00 	jmp	0xec	; 0xec <__ctors_end>
   4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
   8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
   c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  54:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  58:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  5c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  60:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  64:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  68:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  6c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  70:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  74:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  78:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  7c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  80:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  84:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  88:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  8c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  90:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  94:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  98:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  9c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  a0:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  a4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  a8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  ac:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  b0:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  b4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  b8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  bc:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  c0:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  c4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  c8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  cc:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  d0:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  d4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  d8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  dc:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  e0:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  e4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  e8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>

000000ec <__ctors_end>:
  ec:	11 24       	eor	r1, r1
  ee:	1f be       	out	0x3f, r1	; 63
  f0:	cf ef       	ldi	r28, 0xFF	; 255
  f2:	cd bf       	out	0x3d, r28	; 61
  f4:	df e7       	ldi	r29, 0x7F	; 127
  f6:	de bf       	out	0x3e, r29	; 62

000000f8 <__do_clear_bss>:
  f8:	20 e4       	ldi	r18, 0x40	; 64
  fa:	a0 e0       	ldi	r26, 0x00	; 0
  fc:	b0 e4       	ldi	r27, 0x40	; 64
  fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
 100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
 102:	a2 30       	cpi	r26, 0x02	; 2
 104:	b2 07       	cpc	r27, r18
 106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
 108:	0e 94 8a 00 	call	0x114	; 0x114 <main>
 10c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

00000110 <__bad_interrupt>:
 110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <main>:
static void SYSTEM_init(void);

static void PORT_init(void)
{
    /* Disable interrupt and digital input buffer on PD3 */
    PORTD.PIN3CTRL &= ~PORT_ISC_gm;
 114:	e0 e6       	ldi	r30, 0x60	; 96
 116:	f4 e0       	ldi	r31, 0x04	; 4
 118:	83 89       	ldd	r24, Z+19	; 0x13
 11a:	88 7f       	andi	r24, 0xF8	; 248
 11c:	83 8b       	std	Z+19, r24	; 0x13
    PORTD.PIN3CTRL |= PORT_ISC_INPUT_DISABLE_gc;
 11e:	83 89       	ldd	r24, Z+19	; 0x13
 120:	84 60       	ori	r24, 0x04	; 4
 122:	83 8b       	std	Z+19, r24	; 0x13
    /* Disable interrupt and digital input buffer on PD4 */
    PORTD.PIN4CTRL &= ~PORT_ISC_gm;
 124:	84 89       	ldd	r24, Z+20	; 0x14
 126:	88 7f       	andi	r24, 0xF8	; 248
 128:	84 8b       	std	Z+20, r24	; 0x14
    PORTD.PIN4CTRL |= PORT_ISC_INPUT_DISABLE_gc;
 12a:	84 89       	ldd	r24, Z+20	; 0x14
 12c:	84 60       	ori	r24, 0x04	; 4
 12e:	84 8b       	std	Z+20, r24	; 0x14
    
    /* Disable pull-up resistor */
    PORTD.PIN3CTRL &= ~PORT_PULLUPEN_bm;
 130:	83 89       	ldd	r24, Z+19	; 0x13
 132:	87 7f       	andi	r24, 0xF7	; 247
 134:	83 8b       	std	Z+19, r24	; 0x13
    PORTD.PIN4CTRL &= ~PORT_PULLUPEN_bm;
 136:	84 89       	ldd	r24, Z+20	; 0x14
 138:	87 7f       	andi	r24, 0xF7	; 247
 13a:	84 8b       	std	Z+20, r24	; 0x14
}

static void VREF0_init(void)
{
    VREF.ADC0REF = VREF_REFSEL_2V048_gc;  /* Internal 2.048V reference */
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
}

static void ADC0_init(void)
{
    ADC0.CTRLC = ADC_PRESC_DIV4_gc;       /* CLK_PER divided by 4 */
 142:	e0 e0       	ldi	r30, 0x00	; 0
 144:	f6 e0       	ldi	r31, 0x06	; 6
 146:	82 83       	std	Z+2, r24	; 0x02
    ADC0.CTRLA = ADC_ENABLE_bm            /* ADC Enable: enabled */
 148:	93 e2       	ldi	r25, 0x23	; 35
 14a:	90 83       	st	Z, r25
               | ADC_RESSEL_12BIT_gc      /* 12-bit mode */
               | ADC_CONVMODE_bm          /* Differential Conversion */
               | ADC_FREERUN_bm;          /* Enable Free-Run mode */
    ADC0.MUXPOS = ADC_MUXPOS_AIN3_gc;     /* Select ADC channel AIN3 <-> PD3 */
 14c:	93 e0       	ldi	r25, 0x03	; 3
 14e:	90 87       	std	Z+8, r25	; 0x08
    ADC0.MUXNEG = ADC_MUXNEG_AIN4_gc;     /* Select ADC channel AIN4 <-> PD4 */
 150:	94 e0       	ldi	r25, 0x04	; 4
 152:	91 87       	std	Z+9, r25	; 0x09
}

static void ADC0_start(void)
{
    /* Start conversion */
    ADC0.COMMAND = ADC_STCONV_bm;
 154:	82 87       	std	Z+10, r24	; 0x0a
}

static bool ADC0_conversionDone(void)
{
    /* Check if the conversion is done  */
    return (ADC0.INTFLAGS & ADC_RESRDY_bm);
 156:	85 85       	ldd	r24, Z+13	; 0x0d
    SYSTEM_init();
    ADC0_start();
    
    while (1)
    {
        if (ADC0_conversionDone())
 158:	80 ff       	sbrs	r24, 0
 15a:	fd cf       	rjmp	.-6      	; 0x156 <main+0x42>
}

static int16_t ADC0_read(void)
{
    /* Clear the interrupt flag by reading the result */
    return ADC0.RES;
 15c:	80 89       	ldd	r24, Z+16	; 0x10
 15e:	91 89       	ldd	r25, Z+17	; 0x11
    
    while (1)
    {
        if (ADC0_conversionDone())
        {
            adcVal = ADC0_read();
 160:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
 164:	90 93 01 40 	sts	0x4001, r25	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 168:	f6 cf       	rjmp	.-20     	; 0x156 <main+0x42>

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
